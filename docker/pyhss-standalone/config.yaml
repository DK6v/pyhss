## HSS Parameters (Docker)
hss:
  transport: "TCP"
  #IP Addresses to bind on (List) - For TCP only the first IP is used, for SCTP all used for Transport (Multihomed).
  bind_ip: ["0.0.0.0"]

  #Port to listen on (Same for TCP & SCTP)
  bind_port: 3868

  #Value to populate as the OriginHost in Diameter responses
  OriginHost: "pyhss"

  #Value to populate as the OriginRealm in Diameter responses
  OriginRealm: "pyhss"

  #Value to populate as the Product name in Diameter responses
  ProductName: "pyHSS"

  #Your Home Mobile Country Code (Used for PLMN calcluation)
  MCC: "MCC"
  #Your Home Mobile Network Code (Used for PLMN calcluation)
  MNC: "MNC"

  #Enable GMLC / SLh Interface
  SLh_enabled: False

  #IMSI of Test Subscriber for Unit Checks (Optional)
  test_sub_imsi: 'Test_Subscriber_IMSI'

  #The maximum time to wait, in seconds, before disconnecting a client when no data is received.
  client_socket_timeout: 120

  #The maximum time to wait, in seconds, before discarding a diameter request.
  diameter_request_timeout: 3

  #The amount of time, in seconds, before purging a disconnected client from the Active Diameter Peers key in redis.
  active_diameter_peers_timeout: 10

  #Prevent updates from being performed without a valid 'Provisioning-Key' in the header
  lock_provisioning: False

  #Provisioning Key for this HSS, alias for an API key. Required to be present in the header of requests to this HSS' api, if lock_provisioning is True.
  provisioning_key: "hss"

  #If enabled sends CLRs to old MME when new MME attaches active sub
  CancelLocationRequest_Enabled: False

  #Workaround for some MMEs to force an Insert Subscriber Data request to be sent immediately after ULA
  Insert_Subscriber_Data_Force: False

    #Default Initial Filter Criteria for IMS Subscribers
  #Jinja Formatted Template, see the example for variables passed to it.
  Default_iFC: 'default_ifc.xml'

  #Default Sh User Data
  Default_Sh_UserData: 'default_sh_user_data.xml'

  #Device Watchdog Request Interval (In Seconds - If set to 0 disabled)
  device_watchdog_request_interval: 0

  #Async Queue Check Interval (In Seconds - If set to 0 disabled)
  async_check_interval: 0

  # The number of Diameter workers
  diameter_service_workers: 32
  diameter_request_timeout: 10

logging:
  level: ${PYHSS_LOG_LEVEL}
  logfiles:
    hss_logging_file: ${PYHSS_LOG_FILES_PATH}/hss.log
    diameter_logging_file: ${PYHSS_LOG_FILES_PATH}/diameter.log
    database_logging_file: ${PYHSS_LOG_FILES_PATH}/db.log
    geored_logging_file: ${PYHSS_LOG_FILES_PATH}/geored.log
    metric_logging_file: ${PYHSS_LOG_FILES_PATH}/metrics.log
  log_to_terminal: True
  sqlalchemy_sql_echo: False
  sqlalchemy_pool_recycle: 15
  sqlalchemy_pool_size: 30
  sqlalchemy_max_overflow: 0

api:
  page_size: 200
  # Whether or not to return key-based data when querying the AUC. Disable in production systems.
  enable_insecure_auc: True

#Redis is required to run PyHSS. An instance running on a local network is recommended for production.
redis:
  # Which connection type to attempt. Valid options are: tcp, unix, sentinel
  # tcp - Connection via a standard TCP socket to a given host and port.
  # unix - Connect to redis via a unix socket, provided by unixSocketPath.
  # sentinel - Connect to one or more redis sentinel hosts.
  connectionType: "tcp"
  clear_stats_on_boot: True
  host: pyhss.redis
  port: 6379

## Database Parameters
# Multiple database types are supported, and additional database can be added easily.
# See ``databases.md`` for information on connecting to your database of choice, with your preferred schema.
database:
  db_type: postgresql
  server: pyhss.psql.0
  database: ${POSTGRES_DB}
  username: ${POSTGRES_USER}
  password: ${POSTGRES_PASSWORD}
  readCacheEnabled: True
  readCacheInterval: 60

prometheus:
  enabled: False
  port: 8081    #If the API is run the API runs on the next port number up from this
  async_subscriber_count: False    #If enabled the subscriber count will be updated asynchronously for Prometheus

snmp:
  port: 1161
  listen_address: 127.0.0.1
